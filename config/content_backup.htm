<h1>About</h1>
<p>此內容管理系統以 <a href="https://github.com/mdecourse/cmsimde">https://github.com/mdecourse/cmsimde</a> 作為 submodule 運作, 可以選定對應的版本運作, cmsimde 可以持續改版, 不會影響之前設為 submodule, 使用舊版 cmsimde 模組的內容管理相關運作.</p>
<h4>利用 cmsimde 建立靜態網誌方法:</h4>
<p>1. 在 github 建立倉儲, git clone 到近端</p>
<p>2. 參考 <a href="https://github.com/mdecourse/newcms">https://github.com/mdecourse/newcms</a>, 加入除了 cmsimde 目錄外的所有內容</p>
<p>以 git submodule add <a href="https://github.com/mdecourse/cmsimde">https://github.com/mdecourse/cmsimde</a> cmsimde</p>
<p>建立 cmsimde 目錄, 並從 github 取下子模組內容.</p>
<p>3.在近端維護時, 更換目錄到倉儲中的 cmsimde, 以 python wsgi.py 啟動近端網際伺服器.</p>
<p>動態內容編輯完成後, 以 generate_pages 轉為靜態內容, 以 git add commit 及 push 將內容推到遠端.</p>
<p>4. 之後若要以 git clone 取下包含 submodule 的所有內容, 執行:</p>
<p>git clone --recurse-submodules <a href="https://github.com/mdecourse/newcms.git">https://github.com/mdecourse/newcms.git</a></p>
<h1>Develop</h1>
<p><a href="https://github.com/mdecourse/cmsimde">https://github.com/mdecourse/cmsimde</a> 的開發, 可以在一個目錄中放入 cmsimde, 然後將 up_dir 中的內容放到與 cmsimde 目錄同位階的地方, 使用 command 進入 cmsimde 目錄, 執行 python wsgi.py, 就可以啟動, 以瀏覽器 https://localhost:9443 就可以連接, 以 admin 作為管理者密碼, 就可以登入維護內容.</p>
<p>cmsimde 的開發採用 Leo Editor, 開啟 cmsimde 目錄中的 cmsimde.leo 就可以進行程式修改, 結束後, 若要保留網際內容, 只要將 cmsimde 外部的內容倒回 up_dir 目錄中即可後續對 cmsimde 遠端倉儲進行改版.</p>
<p>init.py 位於  up_dir 目錄, 可以設定 site_title 與 uwsgi 等變數.</p>
<h1>Ahoy!</h1>
<h2>Date</h2>
<h3>W1</h3>
<p><span>進入 </span><a href="https://kaggle.com/">https://kaggle.com</a><span>  利用 Python Notebook 練習 Python 程式</span></p>
<div class="line number1 index0 alt2"><code class="py plain">var1 </code><code class="py keyword">=</code> <code class="py value">1</code></div>
<div class="line number2 index1 alt1"><code class="py plain">var2 </code><code class="py keyword">=</code> <code class="py value">1.01</code></div>
<div class="line number3 index2 alt2"><code class="py plain">var3 </code><code class="py keyword">=</code> <code class="py string">"integer"</code></div>
<div class="line number4 index3 alt1"><code class="py plain">var4 </code><code class="py keyword">=</code> <code class="py string">"float number"</code></div>
<div class="line number5 index4 alt2"><code class="py plain">_var5 </code><code class="py keyword">=</code> <code class="py string">"Hello"</code></div>
<div class="line number6 index5 alt1"><code class="py functions">print</code><code class="py plain">(_var5 </code><code class="py keyword">+</code> <code class="py string">","</code> <code class="py keyword">+</code> <code class="py functions">str</code><code class="py plain">(var1) </code><code class="py keyword">+</code> <code class="py string">" is an "</code> <code class="py keyword">+</code> <code class="py plain">var3 </code><code class="py keyword">+</code> <code class="py string">"."</code><code class="py plain">)</code></div>
<div class="line number6 index5 alt1"><code class="py plain"></code></div>
<h3><span face="monospace" style="font-family: monospace;">W2</span></h3>
<h4 class="line number6 index5 alt1">下載可攜式Python套件</h4>
<p>網址:<a href="http://a.kmol.info:88/">http://a.kmol.info:88</a></p>
<p>進入Github創造一個cp2020的倉儲</p>
<p><img alt="" height="923" src="/images/1.PNG" width="835"/></p>
<h3>W3</h3>
<p><span>完成亂數分組和分組倉儲  每班分成五組 </span></p>
<p>1a</p>
<p>group 1:<br/><br/>Repository:<span> </span><a href="https://github.com/40923102/cp2020">40923102</a><span> </span>| Site:<span> </span><a href="https://40923102.github.io/cp2020">40923102</a><br/>Repository:<span> </span><a href="https://github.com/40923103/cp2020">40923103</a><span> </span>| Site:<span> </span><a href="https://40923103.github.io/cp2020">40923103</a><br/>Repository:<span> </span><a href="https://github.com/40923117/cp2020">40923117</a><span> </span>| Site:<span> </span><a href="https://40923117.github.io/cp2020">40923117</a><br/>Repository:<span> </span><a href="https://github.com/40923119/cp2020">40923119</a><span> </span>| Site:<span> </span><a href="https://40923119.github.io/cp2020">40923119</a><br/>Repository:<span> </span><a href="https://github.com/40923123/cp2020">40923123</a><span> </span>| Site:<span> </span><a href="https://40923123.github.io/cp2020">40923123</a><span> </span>(組長)<br/>Repository:<span> </span><a href="https://github.com/40923127/cp2020">40923127</a><span> </span>| Site:<span> </span><a href="https://40923127.github.io/cp2020">40923127</a><br/>Repository:<span> </span><a href="https://github.com/40923131/cp2020">40923131</a><span> </span>| Site:<span> </span><a href="https://40923131.github.io/cp2020">40923131</a><br/>Repository:<span> </span><a href="https://github.com/40923133/cp2020">40923133</a><span> </span>| Site:<span> </span><a href="https://40923133.github.io/cp2020">40923133</a><br/>Repository:<span> </span><a href="https://github.com/40923141/cp2020">40923141</a><span> </span>| Site:<span> </span><a href="https://40923141.github.io/cp2020">40923141</a><br/>Repository:<span> </span><a href="https://github.com/40923144/cp2020">40923144</a><span> </span>| Site:<span> </span><a href="https://40923144.github.io/cp2020">40923144</a><br/>Repository:<span> </span><a href="https://github.com/40923148/cp2020">40923148</a><span> </span>| Site:<span> </span><a href="https://40923148.github.io/cp2020">40923148</a><br/>Repository:<span> </span><a href="https://github.com/40923149/cp2020">40923149</a><span> </span>| Site:<span> </span><a href="https://40923149.github.io/cp2020">40923149</a><br/><br/><br/>==============================<br/><br/>group 2:<br/><br/>Repository:<span> </span><a href="https://github.com/40623219/cp2020">40623219</a><span> </span>| Site:<span> </span><a href="https://40623219.github.io/cp2020">40623219</a><br/>Repository:<span> </span><a href="https://github.com/40923101/cp2020">40923101</a><span> </span>| Site:<span> </span><a href="https://40923101.github.io/cp2020">40923101</a><br/>Repository:<span> </span><a href="https://github.com/40923104/cp2020">40923104</a><span> </span>| Site:<span> </span><a href="https://40923104.github.io/cp2020">40923104</a><br/>Repository:<span> </span><a href="https://github.com/40923107/cp2020">40923107</a><span> </span>| Site:<span> </span><a href="https://40923107.github.io/cp2020">40923107</a><br/>Repository:<span> </span><a href="https://github.com/40923115/cp2020">40923115</a><span> </span>| Site:<span> </span><a href="https://40923115.github.io/cp2020">40923115</a><br/>Repository:<span> </span><a href="https://github.com/40923124/cp2020">40923124</a><span> </span>| Site:<span> </span><a href="https://40923124.github.io/cp2020">40923124</a><br/>Repository:<span> </span><a href="https://github.com/40923125/cp2020">40923125</a><span> </span>| Site:<span> </span><a href="https://40923125.github.io/cp2020">40923125</a><span> </span>(組長)<br/>Repository:<span> </span><a href="https://github.com/40923136/cp2020">40923136</a><span> </span>| Site:<span> </span><a href="https://40923136.github.io/cp2020">40923136</a><br/>Repository:<span> </span><a href="https://github.com/40923142/cp2020">40923142</a><span> </span>| Site:<span> </span><a href="https://40923142.github.io/cp2020">40923142</a><br/>Repository:<span> </span><a href="https://github.com/40923151/cp2020">40923151</a><span> </span>| Site:<span> </span><a href="https://40923151.github.io/cp2020">40923151</a><br/>Repository:<span> </span><a href="https://github.com/40923152/cp2020">40923152</a><span> </span>| Site:<span> </span><a href="https://40923152.github.io/cp2020">40923152</a><br/><br/><br/>==============================<br/><br/>group 3:<br/><br/>Repository:<span> </span><a href="https://github.com/s40723154/cp2020">40723154</a><span> </span>| Site:<span> </span><a href="https://s40723154.github.io/cp2020">40723154</a><br/>Repository:<span> </span><a href="https://github.com/40828127/cp2020">40828127</a><span> </span>| Site:<span> </span><a href="https://40828127.github.io/cp2020">40828127</a><br/>Repository:<span> </span><a href="https://github.com/40923106/cp2020">40923106</a><span> </span>| Site:<span> </span><a href="https://40923106.github.io/cp2020">40923106</a><br/>Repository:<span> </span><a href="https://github.com/40923108/cp2020">40923108</a><span> </span>| Site:<span> </span><a href="https://40923108.github.io/cp2020">40923108</a><br/>Repository:<span> </span><a href="https://github.com/40923118/cp2020">40923118</a><span> </span>| Site:<span> </span><a href="https://40923118.github.io/cp2020">40923118</a><br/>Repository:<span> </span><a href="https://github.com/40923120/cp2020">40923120</a><span> </span>| Site:<span> </span><a href="https://40923120.github.io/cp2020">40923120</a><br/>Repository:<span> </span><a href="https://github.com/40923126-1/cp2020">40923126</a><span> </span>| Site:<span> </span><a href="https://40923126-1.github.io/cp2020">40923126</a><span> </span>(組長)<br/>Repository:<span> </span><a href="https://github.com/40923128/cp2020">40923128</a><span> </span>| Site:<span> </span><a href="https://40923128.github.io/cp2020">40923128</a><br/>Repository:<span> </span><a href="https://github.com/40923138/cp2020">40923138</a><span> </span>| Site:<span> </span><a href="https://40923138.github.io/cp2020">40923138</a><br/>Repository:<span> </span><a href="https://github.com/40923145/cp2020">40923145</a><span> </span>| Site:<span> </span><a href="https://40923145.github.io/cp2020">40923145</a><br/>Repository:<span> </span><a href="https://github.com/40923150/cp2020">40923150</a><span> </span>| Site:<span> </span><a href="https://40923150.github.io/cp2020">40923150</a><br/><br/><br/>==============================<br/><br/>group 4:<br/><br/>Repository:<span> </span><a href="https://github.com/40923113/cp2020">40923113</a><span> </span>| Site:<span> </span><a href="https://40923113.github.io/cp2020">40923113</a><br/>Repository:<span> </span><a href="https://github.com/40923114/cp2020">40923114</a><span> </span>| Site:<span> </span><a href="https://40923114.github.io/cp2020">40923114</a><br/>Repository:<span> </span><a href="https://github.com/40923116/cp2020">40923116</a><span> </span>| Site:<span> </span><a href="https://40923116.github.io/cp2020">40923116</a><span> </span>(組長)<br/>Repository:<span> </span><a href="https://github.com/40923121/cp2020">40923121</a><span> </span>| Site:<span> </span><a href="https://40923121.github.io/cp2020">40923121</a><br/>Repository:<span> </span><a href="https://github.com/40923129/cp2020">40923129</a><span> </span>| Site:<span> </span><a href="https://40923129.github.io/cp2020">40923129</a><br/>Repository:<span> </span><a href="https://github.com/a40923137/cp2020">40923137</a><span> </span>| Site:<span> </span><a href="https://a40923137.github.io/cp2020">40923137</a><br/>Repository:<span> </span><a href="https://github.com/40923140/cp2020">40923140</a><span> </span>| Site:<span> </span><a href="https://40923140.github.io/cp2020">40923140</a><br/>Repository:<span> </span><a href="https://github.com/40923146/cp2020">40923146</a><span> </span>| Site:<span> </span><a href="https://40923146.github.io/cp2020">40923146</a><br/>Repository:<span> </span><a href="https://github.com/40923147/cp2020">40923147</a><span> </span>| Site:<span> </span><a href="https://40923147.github.io/cp2020">40923147</a><br/><br/><br/>==============================<br/><br/>group 5:<br/><br/>Repository:<span> </span><a href="https://github.com/40923105/cp2020">40923105</a><span> </span>| Site:<span> </span><a href="https://40923105.github.io/cp2020">40923105</a><br/>Repository:<span> </span><a href="https://github.com/40923109/cp2020">40923109</a><span> </span>| Site:<span> </span><a href="https://40923109.github.io/cp2020">40923109</a><br/>Repository:<span> </span><a href="https://github.com/40923110/cp2020">40923110</a><span> </span>| Site:<span> </span><a href="https://40923110.github.io/cp2020">40923110</a><br/>Repository:<span> </span><a href="https://github.com/40923111/cp2020">40923111</a><span> </span>| Site:<span> </span><a href="https://40923111.github.io/cp2020">40923111</a><br/>Repository:<span> </span><a href="https://github.com/40923122/cp2020">40923122</a><span> </span>| Site:<span> </span><a href="https://40923122.github.io/cp2020">40923122</a><br/>Repository:<span> </span><a href="https://github.com/40923130/cp2020">40923130</a><span> </span>| Site:<span> </span><a href="https://40923130.github.io/cp2020">40923130</a><br/>Repository:<span> </span><a href="https://github.com/40923134/cp2020">40923134</a><span> </span>| Site:<span> </span><a href="https://40923134.github.io/cp2020">40923134</a><br/>Repository:<span> </span><a href="https://github.com/40923135/cp2020">40923135</a><span> </span>| Site:<span> </span><a href="https://40923135.github.io/cp2020">40923135</a><span> </span>(組長)<br/>Repository:<span> </span><a href="https://github.com/40923139/cp2020">40923139</a><span> </span>| Site:<span> </span><a href="https://40923139.github.io/cp2020">40923139</a><br/>Repository:<span> </span><a href="https://github.com/40923143/cp2020">40923143</a><span> </span>| Site:<span> </span><a href="https://40923143.github.io/cp2020">40923143</a><br/>Repository:<span> </span><a href="https://github.com/40923153/cp2020">40923153</a><span> </span>| Site:<span> </span><a href="https://40923153.github.io/cp2020">40923153</a></p>
<p></p>
<h3>W5</h3>
<p><span>用Kaggle</span><span>列印</span><a href="https://nfulist.herokuapp.com/?semester=1091&amp;courseno=0762">https://nfulist.herokuapp.com/?semester=1091&amp;courseno=0762</a><span>的學員名單</span></p>
<p><img alt="" height="958" src="/images/2.PNG" width="1920"/></p>
<h2>HW1</h2>
<p>CH6</p>
<h3 contenteditable="true" data-element="title">RAM Basics RAM基本運作原理</h3>
<p id="N10677" lang="">In order for a computer to function, it needs a temporary storage space to store data that is input into the computer from the user or the hard drive, and to store data that is about to be written to more permanent storage. This temporary storage is called RAM, or random access memory. RAM is the workspace for the CPU to process data. When the computer boots up the OS (operating system) loads the start files into RAM. RAM is dynamic and constantly changing. It operates much faster than a hard drive, and can be changed at any time by the computer. RAM is volatile memory which means it loses all its information when power is removed, so it can only be used as temporary storage. This memory is used for operating systems startup files (bootstrap loader), programs, data, and disk caching. Adding RAM to a computer is one of the easiest and most effective upgrades a person can perform, since it drastically improves the transfers between the CPU and the other input devices (like hard drives), and this increases the overall speed of the computer.</p>
<div class="imagewrap"><span class="image">                                                        <img alt="Photograph of 1GB random access memory board." class="popimg" id="_i_0" onclick="loadImageFromPage(this);" src="https://oli.cmu.edu/repository/webcontent/d826575d0a0001dc3e9f244fa018c560/PCH06/webcontent/PCH06/image1.png" title="Photograph of 1GB random access memory board."/></span></div>
<div class="imagewrap"><span class="caption" lang="">Random access memory board. Photo used under CC-BY-SA license from<span> </span><a href="https://flic.kr/p/5WwhEQ" id="_i_1" lang="" target="_blank">Matt Keifer</a>.</span></div>
<div actguid="d87f2de70a0001dc695afe016fb525c5" class="asx" inlineparams="inlineClient=%2Fsuperactivity%2Fassessment2%2FInlineAssessmentClient.swf&amp;activityMode=delivery&amp;activityContextGUID=d87f2de70a0001dc695afe016fb525c5&amp;userGUID=40923117%40gm.nfu.edu.tw&amp;activityService=%2Fjcourse%2Fa2%2Frest&amp;webContentPath=%2Frepository%2Fwebcontent%2Fd826575d0a0001dc3e9f244fa018c560%2F&amp;logService=%2Flog%2Fserver&amp;">
<div class="activitywrap purpose learnbydoing flash" id="dpch06_lbd01">
<div class="activityhead"></div>
</div>
</div>
<p><span>為了使電腦正常運行，它需要一個臨時存儲空間來存儲從用戶或硬碟輸入到電腦中的數據，並將要寫入的數據存儲到永久的儲存空間中。</span><span>該臨時存儲稱為RAM或隨機存取記憶體。</span><span>RAM是給CPU處理資料的暫存區。</span><span>計算機啟動時，作業系統（operating system，簡稱OS）將啟動文件加載到RAM中。</span><span>RAM是動態的並且不斷變化。</span><span>它的運行速度比硬碟快得多，並且可由電腦隨時讀寫。</span><span>RAM是易失性內存，這意味著在斷電時它會丟失所有資料，因此只能用作臨時存儲。</span><span>該內存用於作業系統啟動文件（啟動程序），程序，數據和磁碟緩存。向電腦添加RAM是最簡單且最有效的升級之一，因為它可以極大地改善CPU與其他輸入設備（如硬碟）之間的傳輸，從而提高了電腦的整體速度。</span></p>
<h3>Memory Modules 記憶體模組</h3>
<p>One of the uses of memory is to serve as a disk cache. Like the caches we mentioned in the processor, the RAM acts as a faster, temporary storage area for recently used and commonly used data from the hard drive. Because it is quicker to access RAM than to seek out the data in the hard drive’s sectors, RAM increases the performance of the machine. Disk caching can be used only when there is available extra space in the memory. But what happens if you do not have enough physical memory available? When there is not enough physical memory, the computer creates virtual memory. Virtual memory is sometimes referred to as "page files" or “swap files.” Virtual memory is a slow substitute for RAM since it is a temporary file created on the hard drive and emulates the physical RAM. Essentially, disk caching allows RAM to act like an extremely fast hard drive, while virtual memory consists of files on the hard drive acting as extremely slow memory. RAM is faster than either magnetic storage (like hard drives and floppy disks) or optical storage (DVD, CD, Blu-ray). This is because RAM is a solid-state device without exceedingly long access times. RAM operates in the billionths of a second (nanoseconds), while hard drives and other magnetic media are very slow, operating in the thousandths of a second (milliseconds). Insufficient RAM causes a computer to operate more slowly. So, upgrading RAM is one of the most common upgrades performed by an A+ technician.</p>
<p>                                                      <img alt="Photograph of random access memory board installed on motherboard" src="https://oli.cmu.edu/repository/webcontent/d826575d0a0001dc3e9f244fa018c560/PCH06/webcontent/PCH06/image2.png"/></p>
<p><span><span>內存的用途之一是充當磁碟緩存。</span><span>就像我們在處理器中提到的緩存一樣，RAM充當了硬碟中最近使用和常用的數據的更快的臨時儲存區。</span><span>由於訪問RAM比查找硬碟磁區中的數據更快，因此RAM可提高計算機的性能。</span><span>僅能當記憶體中有可用空間時才可以使用磁碟緩存。</span><span>但是，如果您沒有足夠的實體記憶體</span></span><span><span>可用怎麼辦？</span><span>當實體記憶體不足時，計算機將創建虛擬記憶體。</span><span>虛擬記憶體有時也稱為“分頁檔</span></span><span><span>”或“交換空間”。</span><span>虛擬記憶體是RAM的慢速替代品，因為它是在硬碟驅動器上創建的臨時文件，並模擬RAM。</span><span>本質上，</span><span>磁碟緩存使RAM可以充當極快的硬碟，而虛擬記憶體由硬碟上的文件組成，它們的運行速度非常慢。</span><span>RAM的速度比磁儲存（如硬碟和磁片）或光存儲（DVD，CD，藍光）要快。</span><span>這是因為RAM是固態設備，訪問時間沒有特別長。</span><span>RAM的運行速度為"十億分之一秒"，而硬碟和其他磁性介質的運行速度非常慢，為"千分之一秒"。</span><span>RAM不足會導致計算機運行更慢。</span><span>因此，升級RAM是A+技術人員執行的最常見的升級之一。</span></span></p>
<h3><span><span>Classifying Memory 記憶體分類</span></span></h3>
<h4 contenteditable="true" lang=""><span title="Quick scroll up">Classifying Memory</span></h4>
<p id="N106A0" lang="">There are multiple classifications for RAM: memory module type, chip type, speed, and parity. Memory modules vary by type, which is defined by the motherboard and the motherboard’s form factor. Memory modules are defined by the number of pins they have on the modules, like 240-pin DIMM (dual in-line memory module), 184-pin DIMM, etc.</p>
<p id="N106A3" lang="">RAM is also classified based upon memory chip type. In the past, systems used different types of chips based on their manufacturer, but current systems use mostly the same type, usually DDR (dual data rate), DDR2, or DDR3. Although the DDR is the most common type, some unique systems may use RDRAM (Rambus dynamic random access memory).</p>
<p id="N106A6" lang="">Another RAM classification is based on speed. Older memory was classified in nanoseconds (for example, 60 nanoseconds). Over time, all memory became nearly the same speed, as measured in nanoseconds, so they changed this to bus speed (for example, PC-133 memory operates at a bus speed of 133 MHz). Most contemporary memory is now measured in throughput (PC2-6400, which operates at 800 MHz but has 6.4 GBps of bandwidth).</p>
<p id="N106A9" lang="">Finally, memory can be purchased with and classified by parity, non-parity, or ECC. Parity memory checks for errors as data is read/written to the chip. While parity memory can detect an error, it cannot correct it. Non-parity memory, one of the most common types found in desktop computers, has no error checking ability. Error correcting code (ECC) is an advanced version of parity that can find an error and correct that error as it is read/written from the chip. Due to these additional functions, ECC tends to be slower than equivalent non-parity RAM.</p>
<div class="imagewrap">                                                                      <img alt="Photograph of random access memory board." src="https://oli.cmu.edu/repository/webcontent/d826575d0a0001dc3e9f244fa018c560/PCH06/webcontent/PCH06/image3.png"/></div>
<p><span><span>RAM有多種分類：記憶體模塊類型，芯片類型，速度和奇偶校驗位類型。</span></span></p>
<p><span><span>記憶體模塊因類型而異，具體取決於母板和母板的外形尺寸。記憶體模塊由其上的針腳數量定義，例如240針DIMM（雙列直插式記憶體），184針DIMM等。</span></span></p>
<p><span><span>RAM也根據存儲芯片類型進行分類。過去，系統根據製造商使用不同類型的芯片，但是當前的系統大多使用相同類型的芯片，通常是DDR（雙倍資料率），DDR2或DDR3。儘管DDR是最常見的類型，但某些獨特的系統可能會使用RDRAM（Rambus(公司)<b>動態隨機存取記憶體</b>）。</span></span></p>
<p>另一個RAM分類基於速度。較舊的內存以納秒（例如60納秒）分類。隨著時間的流逝，所有內存變為幾乎相同的速度（以納秒為單位），因此他們將其更改為總線速度（例如，PC-133內存以133 MHz的總線速度運行）。現在，大多數當代內存都是通過吞吐量來衡量的（PC2-6400，運行於800 MHz，但具有6.4 GBps的帶寬）。</p>
<p>最後，可以使用奇偶校驗，非奇偶校驗或ECC購買存儲器並按其分類。奇偶校驗存儲器在將數據讀/寫到芯片時檢查錯誤。儘管奇偶校驗內存可以檢測到錯誤，但無法糾正錯誤。非奇偶校驗內存是台式計算機中最常見的類型之一，沒有錯誤檢查功能。糾錯碼（ECC）是奇偶校驗的高級版本，可以發現錯誤並在從芯片讀取/寫入該錯誤時對其進行糾正。由於這些附加功能，ECC往往比等效的非奇偶校驗RAM慢。</p>
<h3>基於主板確定內存類型</h3>
<p id="N10688" lang="">Different types of RAM have been in common use during different time periods. It is important to understand them all, because many companies use a mix of legacy systems and more current ones. DRAM, or dynamic RAM, is one of the oldest types. It requires frequent refreshing of contents. DRAM stores each bit of data or program code in a storage cell consisting of a capacitor and a transistor, and is typically organized in a rectangular configuration of storage cells. A DRAM storage cell is dynamic in that it needs to be refreshed or given a new electronic charge every few milliseconds to compensate for charge leaks from the capacitor.</p>
<p id="N1068B" lang="">SRAM, or static RAM, solved the issue of the need for constant refreshing, but it is quite expensive to manufacture. Therefore, SRAM is only used for very high-speed needs, such as level 1, level 2, and level 3 CPU caches, hard drive buffers, and LCD screen buffers.</p>
<p id="N1068E" lang="">SDRAM, or synchronous DRAM, was the first memory that operated at the same speed as the motherboard’s bus. The initial chips were 168-pin dual in-line memory modules, which have their speed rated in MHz. Common naming conventions include PC-66 (which is equivalent to 66 Mhz), or PC-133, or PC-266.</p>
<p id="N10691" lang="">While SDRAM performs at the same speed as the motherboard’s bus, the CPU operates many times faster than the motherboard’s bus. DDR SDRAM stands for double data rate synchronous dynamic random access memory. This type of memory can transfer data two times per clock cycle, thereby doubling the speed over traditional SDRAM. These chips come in 184-pin varieties, rated in MBps (throughput). A good example of this is something like PC-1600, which is 1600 MBps throughput.</p>
<p id="N10694" lang="">DDR2 SDRAM is double double data rate SDRAM, which has a higher<span> </span><a aria-describedby="N10698" class="extra" id=""></a>latency<span> </span>but faster access to the external bus. These chips have 240 pins to connect their modules to the slot, and are also rated in MBps, such as PC2-4200, which is 4200 MBps (or 4.2 GBps).</p>
<p id="N1069F" lang="">DDR3 SDRAM is known as double data rate 3 SDRAM, and is the latest generation of SDRAM in use today. It runs at a lower voltage and is faster than DDR2, but again the latency is increased over the previous DDR2 modules. These modules also have 240 pins, but they are “keyed” differently than DDR2. The “keyed” portion is where the gap in the pins is located, so only a DDR2 will fit in a DDR2 slot, and a DDR3 will fit only in a DDR3 slot. The common notation for these is PC3-10600, where the 10600 is the speed in MBps.</p>
<p id="N106A2" lang="">Rambus direct ram (RDRAM) is also known as RIMM (Rambus in-line memory module). These modules come in a 184-pin variant (16-bit version) and a 232-pin variant (32-bit version). Each empty slot in the motherboard has to have a continuity module (CRIMM) placed inside it, or the motherboard won’t recognize the memory properly. This is not used in recent systems, but was used heavily in Pentium 4 systems. The RDRAM is measured in MBps, such as RIMM 4200 (or 4200 MBps).</p>
<p id="N10702" lang=""><span><span>您需要使用的內存類型由主板決定。</span><span>最佳做法是在購買新模塊之前，檢查主板手冊中的內存類型，大小和速度是否合適。</span><span>某些主板可讓您混合使用模塊的大小，而另一些則要求所有模塊的大小均相同。</span><span>例如，如果母板上有兩個內存插槽，則可能允許您在一個插槽中放置一個1 GB的模塊，在另一個插槽中放置一個2 GB的模塊。</span><span>其他主板要求所有插槽中都具有相同大小的芯片，例如兩個插槽中都有1 GB的模塊。</span><span>要考慮的另一個因素是主板的“庫”大小。</span><span>一些主板支持一組，這意味著您可以在主板中使用單個模塊。</span><span>其他主板需要兩個模塊來完成存儲（插槽必須成對填充）。</span></span></p>
<p id="N10705" lang=""><span><span>主板可能支持的另一個功能稱為雙通道或三通道。</span><span>在這些通道模式下，母板要求用戶在兩個（雙）或三個（三重）插槽中安裝相同尺寸和速度的模塊。</span><span>這樣可以交錯訪問內存，以加快內存的性能，從而加快計算機的運行速度。</span><span>考慮一下交錯，就好像您有兩匹馬拉著一輛馬車而不是一輛。</span><span>雖然每匹馬可能自己可以拉100磅，但它們合起來可以拉250磅。</span><span>在內存上下文中進行交織是相同的想法—交織內存時訪問速度會提高。</span><span>一起訪問兩個內存芯片的總和比單獨訪問一個芯片更快。</span></span></p>
<p id="N10708" lang=""><span><span>最後，可以安裝的模塊總數也由主板的外形尺寸決定。</span><span>如果您使用的是較小型的主板，例如mini-ATX，則其模塊插槽可能會更少（也許是兩個插槽，而完整的ATX板上則是四個或六個）。</span></span></p>
<p id="N10688" lang=""><span>在不同時間段內，通常使用不同類型的RAM。了解所有這些信息非常重要，因為許多公司使用的都是舊系統和最新系統。DRAM或動態RAM是最古老的類型之一。它需要經常刷新內容。DRAM將數據或程序代碼的每一位存儲在由電容器和晶體管組成的存儲單元中，並且通常以矩形配置的存儲單元來組織。DRAM存儲單元是動態的，因為它需要每幾毫秒刷新一次或給其提供新的電荷，以補償電容器的電荷洩漏。</span></p>
<p id="N1068B" lang=""><span><span>SRAM或靜態RAM解決了不斷刷新的問題，但製造成本很高。</span><span>因此，SRAM僅用於非常高速的需求，例如1級，2級和3級CPU高速緩存，硬盤驅動器緩衝區和LCD屏幕緩衝區。</span></span></p>
<p id="N1068E" lang=""><span><span>SDRAM或同步DRAM是第一個以與主板總線相同的速度運行的內存。</span><span>最初的芯片是168針雙列直插式內存模塊，其速度額定為MHz。</span><span>常見的命名約定包括PC-66（相當於66 Mhz），PC-133或PC-266。</span></span></p>
<p id="N10691" lang=""><span><span>儘管SDRAM的運行速度與主板總線相同，但CPU的運行速度卻比主板總線快許多倍。</span><span>DDR SDRAM代表雙倍數據速率同步動態隨機存取存儲器。</span><span>這種類型的存儲器可以在每個時鐘週期兩次傳輸數據，從而使速度比傳統SDRAM快一倍。</span><span>這些芯片有184引腳的型號，額定為MBps（吞吐量）。</span><span>一個很好的例子就是PC-1600，吞吐量為1600 MBps。</span></span></p>
<p id="N10694" lang=""><span><span>DDR2 SDRAM是雙倍數據速率SDRAM，具有更高的<span> </span></span></span><a aria-describedby="N10698" class="extra" id=""></a><span><span>延遲，</span></span><span><span><span> </span>但對外部總線的訪問速度更快。</span><span>這些芯片具有240個引腳以將其模塊連接到插槽，並且還以MBps額定，例如PC2-4200，即4200 MBps（或4.2 GBps）。</span></span></p>
<p id="N1069F" lang=""><span><span>DDR3 SDRAM被稱為雙倍數據速率3 SDRAM，是當今使用的最新一代SDRAM。</span><span>它在較低的電壓下運行，並且比DDR2更快，但是與之前的DDR2模塊相比，延遲又增加了。</span><span>這些模塊還具有240針，但是它們的“鍵控”與DDR2不同。</span><span>“鍵控”部分是引腳之間的間隙所在的位置，因此只有DDR2可以插入DDR2插槽，而DDR3只能插入DDR3插槽。</span><span>這些的常用符號是PC3-10600，其中10600是MBps的速度。</span></span></p>
<p id="N106A2" lang=""><span><span>Rambus直接RAM（RDRAM）也被稱為RIMM（Rambus嵌入式存儲模塊）。</span><span>這些模塊具有184針變體（16位版本）和232針變體（32位版本）。</span><span>主板上的每個空插槽都必須在其中放置一個連續性模塊（CRIMM），否則主板將無法正確識別內存。</span><span>在最近的系統中未使用此功能，但在Pentium 4系統中大量使用了此功能。</span><span>RDRAM以MBps為單位進行測量，例如RIMM 4200（或4200 MBps）。</span></span></p>
<p lang=""><span><span><img alt="隨機存取存儲器" src="https://oli.cmu.edu/repository/webcontent/d826575d0a0001dc3e9f244fa018c560/PCH06/webcontent/PCH06/image4.jpg"/></span></span></p>
<h3><span><span>Memory Module Width 記憶體模塊寬度</span></span></h3>
<p lang=""><span><span>Memory module width is measured by the number of bits that can be transferred. Memory began in 8-bit varieties, but has increased to 16 bits, 32 bits, and now 64 bits in current systems. Memory must be added in banks to ensure the width equals the width of the memory bus. For example, if you need 64 bits and a single module offers 64 bits, then it will have one module in the bank. Dual-channel memory requires double the amount, therefore two 64-bit (128 bit) DIMMs are needed in the banks, while three are required for triple-channel, as was mentioned earlier.</span></span></p>
<p id="N10696" lang=""><span>記憶體模塊的寬度由可傳輸的位數決定。內存最初以8位形式出現，但在當前系統中已增加到16位，32位和現在的64位。必須以存儲體的形式添加內存，以確保其寬度等於內存總線的寬度。例如，如果您需要64位，而單個模塊提供64位，則庫中將只有一個模塊。如前所述，雙通道內存需要兩倍的存儲量，因此存儲庫中需要兩個64位（128位）DIMM，而三通道則需要三個。</span></p>
<h3 contenteditable="true" lang=""><span title="Quick scroll up">Parity and ECC&gt;<span>奇偶校驗和ECC</span></span></h3>
<p id="N106A9" lang="">Parity is used to perform basic error checking and to ensure the memory contents are reliable. This memory is slower than non-parity, but adds the reliability needed for servers and certain desktop workstations.</p>
<p id="N106AC" lang="">Parity checking is a rather simple method of detecting memory errors, without any correction capabilities. Parity is signified in a single bit of data that is added to the transmitted data string. If the module normally would have seven bits of data, an eighth is added as the parity bit. If the module normally would have eight chips for data, a ninth chip is added for parity.</p>
<p id="N106AF" lang="">Every byte has a parity bit associated with it. In the case that seven bits make up the original data, there are eight total bits transmitted (seven original data bits plus one parity bit). In the case that eight bits make up the original data, a total of nine bits are transmitted (eight data bits plus one parity bit). The parity bit is set at write time, and then calculated and compared at read time to determine if any of the bits have changed since the data was stored. This type of checking is limited to detection of single bit errors. If two bits have been altered, the parity check will “pass,” and the error is allowed to possibly corrupt the data.</p>
<p id="N106B2" lang="">Parity checking can be implemented either as “0” parity or “1” parity. When the byte is stored, the number of zeros (or ones, if “1” parity is selected) is added up. The result is stored in the parity bit – “1” if odd, “0” if even. When that byte is read from memory, the bits are again counted and the result is compared against what was stored in the parity bit. A match means that the data was not changed from when it was stored (or that two bits were altered in such a way that the result is the same).</p>
<p id="N106B5" lang="">The process to determine the parity bit is the same, regardless of the number of original data bits transmitted. Typically, there are either seven or eight bits of original data.</p>
<p id="N106B8" lang="">The parity bit is determined by counting the number of “1” bits in a data string.</p>
<p lang=""></p>
<p id="N106A9" lang=""><span><span>奇偶校驗用於執行基本的錯誤檢查並確保內存內容可靠。</span><span>此內存比非奇偶校驗慢，但增加了服務器和某些台式機工作站所需的可靠性。</span></span></p>
<p id="N106AC" lang=""><span><span>奇偶校驗是一種檢測內存錯誤的相當簡單的方法，沒有任何校正功能。</span><span>奇偶校驗在添加到傳輸數據字符串的單個數據位中表示。</span><span>如果模塊通常具有七個數據位，則將八分之一添加為奇偶校驗位。</span><span>如果模塊通常有八個芯片用於數據，則添加第九個芯片以實現奇偶校驗。</span></span></p>
<p id="N106AF" lang=""><span><span>每個字節都有一個與之關聯的奇偶校驗位。</span><span>在七位組成原始數據的情況下，總共傳輸了八位（七位原始數據位加一個奇偶校驗位）。</span><span>在八位組成原始數據的情況下，總共傳輸九位（八位數據位加一位奇偶校驗位）。</span><span>奇偶校驗位在寫入時設置，然後在讀取時進行計算和比較，以確定自存儲數據以來是否有任何位發生了更改。</span><span>這種類型的檢查僅限於檢測單個位錯誤。</span><span>如果更改了兩位，則奇偶校驗將“通過”，並且允許該錯誤可能破壞數據。</span></span></p>
<p id="N106B2" lang=""><span><span>奇偶校驗可以實現為“ 0”奇偶校驗或“ 1”奇偶校驗。</span><span>存儲字節時，將加零（如果選擇了“ 1”奇偶校驗，則為零）的數目。</span><span>結果存儲在奇偶校驗位中-如果為奇數，則為“ 1”；如果為偶數，則為“ 0”。</span><span>當從內存中讀取該字節時，將再次對這些位進行計數，並將結果與奇偶校驗位中存儲的結果進行比較。</span><span>匹配表示數據從存儲時起就沒有改變（或以結果相同的方式更改了兩位）。</span></span></p>
<p id="N106B5" lang=""><span><span>不管發送的原始數據位數如何，確定奇偶校驗位的過程都是相同的。</span><span>通常，原始數據有七位或八位。</span></span></p>
<p id="N106B8" lang=""><span><span>奇偶校驗位是通過對數據字符串中“ 1”位的數量進行計數來確定的。</span></span></p>
<table align="center" cellspacing="0" class="wbtable" lang="">
<thead>
<tr>
<th align="center" colspan="2" lang="">Set parity bit to:</th>
</tr>
<tr>
<th lang=""></th>
<th lang="">Even parity</th>
<th lang="">Odd parity</th>
</tr>
</thead>
<tbody>
<tr class="e">
<th lang="">Even number of “1” bits</th>
<td align="center" lang="">0</td>
<td align="center" lang="">1</td>
</tr>
<tr>
<th lang="">Odd number of “1” bits</th>
<td align="center" lang="">1</td>
<td align="center" lang="">0</td>
</tr>
</tbody>
</table>
<div class="examplewrap">
<div class="exHead"><br/><span title="Quick scroll up">Single-Sided and Double-Sided Memory </span><span title="快速向上滾動"><span>單面和雙面存儲器</span></span>
<p id="N1080F" lang="">Memory can be single-sided or double-sided. The benefit of double-sided modules is that a higher amount of storage can fit on a single chip and into a single slot. Some motherboards support double-sided SIMMs, but others do not, so it is important to check the motherboard’s manual for guidance. To determine if the module is double-sided, simply look at both sides. If chips are soldered on both sides, it is a double-sided SIMM.<span>Installing memory is a common computer upgrade and a very easy task to perform. Memory modules are installed as “sticks” (or modules) of memory into the “slots” on the motherboard.</span></p>
<p id="N10698" lang="">The process of installing memory sticks is fairly easy, but caution and precision are necessary. To install memory sticks (or modules):</p>
<ol lang="">
<li lang="">Always ensure you take proper ESD (electrostatic discharge) protection measures to ensure both the motherboard and memory modules are not harmed during installation.</li>
<li lang="">Turn off the computer and unplug the power cord.</li>
<li lang="">Open the case and begin the installation of the memory sticks. Always hold the memory sticks by the sides of the chips and never by the gold contacts.</li>
<li lang="">Line up the memory module’s connector with the slot on the motherboard.</li>
<li lang="">Verify that the locking tabs are in the open position.</li>
<li lang="">Push the module straight down until the tabs swivel to the locking position (this takes force).</li>
</ol>
<p id="N106B0" lang="">Important note: Never touch the gold connectors on the modules! Corrosion of the contacts can occur, or the module may be damaged due to electrostatic discharge.</p>
<p lang=""><span><span>內存可以是單面或雙面的。</span><span>雙面模塊的好處在於，單個芯片和單個插槽中可以容納更多的存儲空間。</span><span>有些主板支持雙面SIMM，而其他主板則不支持，因此，請務必仔細閱讀主板手冊以獲取指導。</span><span>要確定模塊是否雙面，只需查看一下雙面即可。</span><span>如果芯片的兩面都焊接，則為雙面SIMM。安裝內存是計算機的常見升級，並且是很容易執行的任務。<span>內存模塊作為內存的“棒”（或模塊）安裝在主板上的“插槽”中。</span></span></span></p>
<p lang=""><span>     <img alt="Photograph of memory modules or “sticks.”" src="https://oli.cmu.edu/repository/webcontent/d826575d0a0001dc3e9f244fa018c560/PCH06/webcontent/PCH06/image8.png"/></span></p>
<p id="N10698" lang=""><span>安裝記憶棒的過程相當容易，但是必須謹慎且精確。要安裝記憶棒（或模塊）：</span></p>
<ol lang="">
<li lang=""><span><span>始終確保採取適當的ESD（靜電釋放）保護措施，以確保在安裝過程中不會損壞主板和內存模塊。</span></span></li>
<li lang=""><span><span>關閉計算機電源，然後拔下電源線。</span></span></li>
<li lang=""><span><span>打開外殼，開始安裝記憶棒。</span><span>始終將記憶棒放在芯片的側面，而不要緊握金觸點。</span></span></li>
<li lang=""><span><span>將內存模塊的連接器與主板上的插槽對齊。</span></span></li>
<li lang=""><span><span>確認鎖定卡舌處於打開位置。</span></span></li>
<li lang=""><span><span>垂直向下推動模塊，直到卡舌旋轉到鎖定位置（需要用力）。</span></span></li>
</ol>
<p id="N106B0" lang=""><span><span>重要說明：切勿觸摸模塊上的金色連接器！</span><span>觸點可能會腐蝕，或者由於靜電放電會損壞模塊</span></span></p>
</div>
</div>
<h2>Python 指令集</h2>
<h3>for 語法</h3>
<h3>if 語法</h3>
<p>if 選項 A: A 對的話做完這段程式碼離開</p>
<p>elif 選項 B: B 對的話做完這段程式碼離開</p>
<p>else: 上面都不對直接做完這段程式碼離開</p>