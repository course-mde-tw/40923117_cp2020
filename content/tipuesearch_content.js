var tipuesearch = {"pages": [{'title': 'About', 'text': '此內容管理系統以\xa0 https://github.com/mdecourse/cmsimde \xa0作為 submodule 運作, 可以選定對應的版本運作, cmsimde 可以持續改版, 不會影響之前設為 submodule, 使用舊版 cmsimde 模組的內容管理相關運作. \n 利用 cmsimde 建立靜態網誌方法: \n 1. 在 github 建立倉儲, git clone 到近端 \n 2. 參考\xa0 https://github.com/mdecourse/newcms , 加入除了 cmsimde 目錄外的所有內容 \n 以 git submodule add\xa0 https://github.com/mdecourse/cmsimde \xa0cmsimde \n 建立 cmsimde 目錄, 並從 github 取下子模組內容. \n 3.在近端維護時, 更換目錄到倉儲中的 cmsimde, 以 python wsgi.py 啟動近端網際伺服器. \n 動態內容編輯完成後, 以 generate_pages 轉為靜態內容, 以 git add commit 及 push 將內容推到遠端. \n 4. 之後若要以 git clone 取下包含 submodule 的所有內容, 執行: \n git clone --recurse-submodules  https://github.com/mdecourse/newcms.git \n', 'tags': '', 'url': 'About.html'}, {'title': 'Develop', 'text': 'https://github.com/mdecourse/cmsimde \xa0的開發, 可以在一個目錄中放入 cmsimde, 然後將 up_dir 中的內容放到與 cmsimde 目錄同位階的地方, 使用 command 進入 cmsimde 目錄, 執行 python wsgi.py, 就可以啟動, 以瀏覽器 https://localhost:9443\xa0就可以連接, 以 admin 作為管理者密碼, 就可以登入維護內容. \n cmsimde 的開發採用 Leo Editor, 開啟 cmsimde 目錄中的 cmsimde.leo 就可以進行程式修改, 結束後, 若要保留網際內容, 只要將 cmsimde 外部的內容倒回 up_dir 目錄中即可後續對 cmsimde 遠端倉儲進行改版. \n init.py 位於\xa0 up_dir 目錄, 可以設定 site_title 與 uwsgi 等變數. \n', 'tags': '', 'url': 'Develop.html'}, {'title': 'Ahoy!', 'text': '', 'tags': '', 'url': 'Ahoy!.html'}, {'title': 'Date', 'text': '', 'tags': '', 'url': 'Date.html'}, {'title': 'W1', 'text': '進入\xa0 https://kaggle.com \xa0 利用 Python Notebook 練習 Python 程式 \n var1  =   1 \n var2  =   1.01 \n var3  =   "integer" \n var4  =   "float number" \n _var5  =   "Hello" \n print (_var5  +   ","   +   str (var1)  +   " is an "   +   var3  +   "." ) \n \n', 'tags': '', 'url': 'W1.html'}, {'title': 'W2', 'text': '下載可攜式Python套件 \n 網址: http://a.kmol.info:88 \n 進入Github創造一個cp2020的倉儲 \n \n', 'tags': '', 'url': 'W2.html'}, {'title': 'W3', 'text': '完成亂數分組和分組倉儲\xa0 每班分成五組\xa0 \n 1a \n group 1: Repository: \xa0 40923102 \xa0 | Site: \xa0 40923102 Repository: \xa0 40923103 \xa0 | Site: \xa0 40923103 Repository: \xa0 40923117 \xa0 | Site: \xa0 40923117 Repository: \xa0 40923119 \xa0 | Site: \xa0 40923119 Repository: \xa0 40923123 \xa0 | Site: \xa0 40923123 \xa0 (組長) Repository: \xa0 40923127 \xa0 | Site: \xa0 40923127 Repository: \xa0 40923131 \xa0 | Site: \xa0 40923131 Repository: \xa0 40923133 \xa0 | Site: \xa0 40923133 Repository: \xa0 40923141 \xa0 | Site: \xa0 40923141 Repository: \xa0 40923144 \xa0 | Site: \xa0 40923144 Repository: \xa0 40923148 \xa0 | Site: \xa0 40923148 Repository: \xa0 40923149 \xa0 | Site: \xa0 40923149 ============================== group 2: Repository: \xa0 40623219 \xa0 | Site: \xa0 40623219 Repository: \xa0 40923101 \xa0 | Site: \xa0 40923101 Repository: \xa0 40923104 \xa0 | Site: \xa0 40923104 Repository: \xa0 40923107 \xa0 | Site: \xa0 40923107 Repository: \xa0 40923115 \xa0 | Site: \xa0 40923115 Repository: \xa0 40923124 \xa0 | Site: \xa0 40923124 Repository: \xa0 40923125 \xa0 | Site: \xa0 40923125 \xa0 (組長) Repository: \xa0 40923136 \xa0 | Site: \xa0 40923136 Repository: \xa0 40923142 \xa0 | Site: \xa0 40923142 Repository: \xa0 40923151 \xa0 | Site: \xa0 40923151 Repository: \xa0 40923152 \xa0 | Site: \xa0 40923152 ============================== group 3: Repository: \xa0 40723154 \xa0 | Site: \xa0 40723154 Repository: \xa0 40828127 \xa0 | Site: \xa0 40828127 Repository: \xa0 40923106 \xa0 | Site: \xa0 40923106 Repository: \xa0 40923108 \xa0 | Site: \xa0 40923108 Repository: \xa0 40923118 \xa0 | Site: \xa0 40923118 Repository: \xa0 40923120 \xa0 | Site: \xa0 40923120 Repository: \xa0 40923126 \xa0 | Site: \xa0 40923126 \xa0 (組長) Repository: \xa0 40923128 \xa0 | Site: \xa0 40923128 Repository: \xa0 40923138 \xa0 | Site: \xa0 40923138 Repository: \xa0 40923145 \xa0 | Site: \xa0 40923145 Repository: \xa0 40923150 \xa0 | Site: \xa0 40923150 ============================== group 4: Repository: \xa0 40923113 \xa0 | Site: \xa0 40923113 Repository: \xa0 40923114 \xa0 | Site: \xa0 40923114 Repository: \xa0 40923116 \xa0 | Site: \xa0 40923116 \xa0 (組長) Repository: \xa0 40923121 \xa0 | Site: \xa0 40923121 Repository: \xa0 40923129 \xa0 | Site: \xa0 40923129 Repository: \xa0 40923137 \xa0 | Site: \xa0 40923137 Repository: \xa0 40923140 \xa0 | Site: \xa0 40923140 Repository: \xa0 40923146 \xa0 | Site: \xa0 40923146 Repository: \xa0 40923147 \xa0 | Site: \xa0 40923147 ============================== group 5: Repository: \xa0 40923105 \xa0 | Site: \xa0 40923105 Repository: \xa0 40923109 \xa0 | Site: \xa0 40923109 Repository: \xa0 40923110 \xa0 | Site: \xa0 40923110 Repository: \xa0 40923111 \xa0 | Site: \xa0 40923111 Repository: \xa0 40923122 \xa0 | Site: \xa0 40923122 Repository: \xa0 40923130 \xa0 | Site: \xa0 40923130 Repository: \xa0 40923134 \xa0 | Site: \xa0 40923134 Repository: \xa0 40923135 \xa0 | Site: \xa0 40923135 \xa0 (組長) Repository: \xa0 40923139 \xa0 | Site: \xa0 40923139 Repository: \xa0 40923143 \xa0 | Site: \xa0 40923143 Repository: \xa0 40923153 \xa0 | Site: \xa0 40923153 \n \n', 'tags': '', 'url': 'W3.html'}, {'title': 'W5', 'text': '用Kaggle 列印 https://nfulist.herokuapp.com/?semester=1091&courseno=0762 的學員名單 \n \n', 'tags': '', 'url': 'W5.html'}, {'title': 'HW1', 'text': 'CH6 \n', 'tags': '', 'url': 'HW1.html'}, {'title': 'RAM Basics RAM基本運作原理', 'text': 'In order for a computer to function, it needs a temporary storage space to store data that is input into the computer from the user or the hard drive, and to store data that is about to be written to more permanent storage. This temporary storage is called RAM, or random access memory. RAM is the workspace for the CPU to process data. When the computer boots up the OS (operating system) loads the start files into RAM. RAM is dynamic and constantly changing. It operates much faster than a hard drive, and can be changed at any time by the computer. RAM is volatile memory which means it loses all its information when power is removed, so it can only be used as temporary storage. This memory is used for operating systems startup files (bootstrap loader), programs, data, and disk caching. Adding RAM to a computer is one of the easiest and most effective upgrades a person can perform, since it drastically improves the transfers between the CPU and the other input devices (like hard drives), and this increases the overall speed of the computer. \n \xa0 \xa0 \xa0 \xa0 \xa0 \xa0 \xa0 \xa0 \xa0 \xa0 \xa0 \xa0 \xa0 \xa0 \n Random access memory board. Photo used under CC-BY-SA license from \xa0 Matt Keifer . \n \n \n \n \n \n 為了使電腦正常運行，它需要一個臨時存儲空間來存儲從用戶或硬碟輸入到電腦中的數據，並將要寫入的數據存儲到永久的儲存空間中。 該臨時存儲稱為RAM或隨機存取記憶體。 RAM是給CPU處理資料的暫存區。 計算機啟動時，作業系統（operating system，簡稱OS）將啟動文件加載到RAM中。 RAM是動態的並且不斷變化。 它的運行速度比硬碟快得多，並且可由電腦隨時讀寫。 RAM是易失性內存，這意味著在斷電時它會丟失所有資料，因此只能用作臨時存儲。 該內存用於作業系統啟動文件（啟動程序），程序，數據和磁碟緩存。向電腦添加RAM是最簡單且最有效的升級之一，因為它可以極大地改善CPU與其他輸入設備（如硬碟）之間的傳輸，從而提高了電腦的整體速度。 \n', 'tags': '', 'url': 'RAM Basics RAM基本運作原理.html'}, {'title': 'Memory Modules 記憶體模組', 'text': 'One of the uses of memory is to serve as a disk cache. Like the caches we mentioned in the processor, the RAM acts as a faster, temporary storage area for recently used and commonly used data from the hard drive. Because it is quicker to access RAM than to seek out the data in the hard drive’s sectors, RAM increases the performance of the machine. Disk caching can be used only when there is available extra space in the memory. But what happens if you do not have enough physical memory available? When there is not enough physical memory, the computer creates virtual memory. Virtual memory is sometimes referred to as "page files" or “swap files.” Virtual memory is a slow substitute for RAM since it is a temporary file created on the hard drive and emulates the physical RAM. Essentially, disk caching allows RAM to act like an extremely fast hard drive, while virtual memory consists of files on the hard drive acting as extremely slow memory. RAM is faster than either magnetic storage (like hard drives and floppy disks) or optical storage (DVD, CD, Blu-ray). This is because RAM is a solid-state device without exceedingly long access times. RAM operates in the billionths of a second (nanoseconds), while hard drives and other magnetic media are very slow, operating in the thousandths of a second (milliseconds). Insufficient RAM causes a computer to operate more slowly. So, upgrading RAM is one of the most common upgrades performed by an A+ technician. \n \xa0 \xa0 \xa0 \xa0 \xa0 \xa0 \xa0 \xa0 \xa0 \xa0 \xa0 \xa0 \xa0 \xa0 \xa0 \xa0 \xa0 \n 內存的用途之一是充當磁碟緩存。 就像我們在處理器中提到的緩存一樣，RAM充當了硬碟中最近使用和常用的數據的更快的臨時儲存區。 由於訪問RAM比查找硬碟磁區中的數據更快，因此RAM可提高計算機的性能。 僅能當記憶體中有可用空間時才可以使用磁碟緩存。 但是，如果您沒有足夠的實體記憶體 可用怎麼辦？ 當實體記憶體不足時，計算機將創建虛擬記憶體。 虛擬記憶體有時也稱為“分頁檔 ”或“交換空間”。 虛擬記憶體是RAM的慢速替代品，因為它是在硬碟驅動器上創建的臨時文件，並模擬RAM。 本質上， 磁碟緩存使RAM可以充當極快的硬碟，而虛擬記憶體由硬碟上的文件組成，它們的運行速度非常慢。 RAM的速度比磁儲存（如硬碟和磁片）或光存儲（DVD，CD，藍光）要快。 這是因為RAM是固態設備，訪問時間沒有特別長。 RAM的運行速度為"十億分之一秒"，而硬碟和其他磁性介質的運行速度非常慢，為"千分之一秒"。 RAM不足會導致計算機運行更慢。 因此，升級RAM是A+技術人員執行的最常見的升級之一。 \n', 'tags': '', 'url': 'Memory Modules 記憶體模組.html'}, {'title': 'Python 指令集', 'text': '', 'tags': '', 'url': 'Python 指令集.html'}, {'title': 'for 語法', 'text': '', 'tags': '', 'url': 'for 語法.html'}, {'title': 'if 語法', 'text': 'if 選項 A: A 對的話做完這段程式碼離開 \n elif 選項 B: B 對的話做完這段程式碼離開 \n else: 上面都不對直接做完這段程式碼離開', 'tags': '', 'url': 'if 語法.html'}]};